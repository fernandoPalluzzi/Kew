# FUNCTION: rmdup

# DESCRIPTION
Remove duplicates from a database or text file.

# USAGE WITH A TEXT FILE
kew.py rmdup <input_file> < -b | -f > -s <groupby> [options]

# USAGE WITH AN SQLite INDEX
kew.py rmdup <input.idb> -t <table> -s <groupby> [options]

# ARGUMENTS
# <input>   Either a tab or blank separated txt file or an SQLite index generated by "store".
# -t        Table to be cleaned. If the input is a file, -t is not required.
# -s        Attribute(s) to be considered as a unique key.
#           Only the first among a group of tuples with the same key is retained.
# -b        Use this option if you want a backup copy (.bkp) of the input file
#           (not an SQLite index database).
# -f        Use this option if the input is a file (not an SQLite index database).
#           Differently from -b, the output will replace the input file.
# -bed      Use this option if the input is a BED file (not a .idb file) and you want a sorted 
#           output file.
# -c        Condition on tuples (-c "...").
# -i        An attribute:ID_list string (table_attribute:ID_list_file).
#           The ID list should be given as a text file with only one ID per line.
#           If ID_list_file is a directory, a recursive query will be performed.
#           Every output file of the recursive query will have .map extension.
# -k        Fields used to sort data. By default, the "rmdup" function retains the
#           first occurrence of a duplicated key. Sorting will decide which line 
#           will appear first. This option will sort the input file before processing it
#           (see also -ord option below).
#           In the sorting argument, each column in the input file is represented 
#           with an "x" followed by a number, indicating the start and the end position
#           of the chosen fields. For example, -k "x4,4" sorts the file by column 4 
#           (i.e. the key starts in column 4 and ends in column 4).
#           To sort a BED file by chromosome and then by start the option will be:
#           -k "x1,1 x2,2n" (chromosome is column 1 and start is column 2).
#           The sorting argument has the following general sintax:
#             -k "xFIELD,FIELD[OPT] x..."
#           where FIELD is a column number, and OPT sort by an option, following
#           Bash sort function:
#                                b  ignore leading blanks
#                                d  consider only blanks and alphanumeric characters
#                                f  ignore case
#                                g  general numeric sort
#                                i  ignore non-printable characters
#                                M  month sort
#                                h  human-readable sort (e.g. 2K, 1G)
#                                n  numbers are considered numeric strings
#                                R  random sort
#                                r  reverse order
#                                V  natural sort of version numbers within text
# -ord      Comma + space-separated table attributes to order by (-ord "attr1, attr2, ..., attrN").
#           This will sort data according to the specified attributes, in ascending order.
#           For descending order, write DESC after the parameter argument
#           (-ord "attr1, attr2, ..., attrN DESC").
#           Differently from -k option (see above), -ord will sort only the output.
# -hdr      Header to be added to the input file.
#           Header format must be a comma + space separated list of attribute names
#           (<attr1, attr2, ...>).
#           Use this option if -b or -f are enabled and the input file has no header.
# -markdup  Duplicate entries in the i-th field are marked instad of removed.
#           A "duplicates" field will be added to the output file. 
# -v        Suppress display output.
